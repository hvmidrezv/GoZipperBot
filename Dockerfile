# --- Stage 1: The Builder ---
# ما از یک ایمیج رسمی Go بر پایه Alpine Linux برای ساخت برنامه استفاده می‌کنیم.
FROM golang:1.23-alpine AS builder

# تنظیم پوشه کاری داخل کانتینر
WORKDIR /app

# ابتدا فایل‌های go.mod و go.sum را کپی می‌کنیم تا از کش داکر بهینه استفاده کنیم.
# اگر این فایل‌ها تغییر نکنند، داکر در بیلد‌های بعدی وابستگی‌ها را دوباره دانلود نمی‌کند.
COPY go.mod go.sum ./
RUN go mod download

# حالا تمام سورس کد پروژه را کپی می‌کنیم.
COPY . .

# برنامه را کامپایل می‌کنیم.
# CGO_ENABLED=0 یک باینری استاتیک می‌سازد که به هیچ کتابخانه C خارجی وابسته نیست.
# این کار برای اجرای برنامه روی ایمیج‌های مینیمال مثل alpine ضروری است.
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o /zipper-bot ./main.go


# --- Stage 2: The Final Image ---
# ما از یک ایمیج بسیار سبک Alpine به عنوان پایه نهایی استفاده می‌کنیم.
FROM alpine:latest

# پوشه کاری را روی ریشه تنظیم می‌کنیم.
WORKDIR /

# فایل باینری کامپایل شده را از مرحله "builder" به ایمیج نهایی کپی می‌کنیم.
COPY --from=builder /zipper-bot /zipper-bot

# این متغیر محیطی را تعریف می‌کنیم تا مشخص باشد که کانتینر به آن نیاز دارد.
# مقدار آن را هنگام اجرای کانتینر به آن پاس خواهیم داد.
ENV TELEGRAM_BOT_TOKEN=""

# دستوری که با شروع به کار کانتینر اجرا می‌شود.
CMD ["/zipper-bot"]